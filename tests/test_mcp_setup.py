#!/usr/bin/env python3
"""
Test script for MCP integration with Python 3.12 and Strands SDK
"""

import sys
import subprocess
import time
import requests
import json

def test_python_version():
    """Test that we're using Python 3.12+"""
    print(f"üîç Testing Python version: {sys.version}")
    major, minor = sys.version_info[:2]
    if major == 3 and minor >= 12:
        print("‚úÖ Python version is compatible")
        return True
    else:
        print("‚ùå Python version is too old for MCP")
        return False

def test_imports():
    """Test that all required packages import correctly"""
    print("\nüîç Testing package imports...")
    
    try:
        import mcp
        print("‚úÖ MCP package imported")
    except ImportError as e:
        print(f"‚ùå MCP import failed: {e}")
        return False
    
    try:
        from strands import Agent, tool
        print("‚úÖ Strands SDK imported")
    except ImportError as e:
        print(f"‚ùå Strands import failed: {e}")
        return False
    
    try:
        from simple_salesforce import Salesforce
        from jira import JIRA
        from anthropic import Anthropic
        print("‚úÖ Service packages imported")
    except ImportError as e:
        print(f"‚ùå Service import failed: {e}")
        return False
    
    try:
        from fastapi import FastAPI
        import uvicorn
        print("‚úÖ Web framework packages imported")
    except ImportError as e:
        print(f"‚ùå Web framework import failed: {e}")
        return False
    
    return True

def test_mcp_servers():
    """Test that MCP servers can start and respond"""
    print("\nüîç Testing MCP servers...")
    
    # Test Salesforce server
    print("Starting Salesforce MCP server...")
    try:
        sf_process = subprocess.Popen([
            sys.executable, "salesforce_server_mcp.py"
        ], 
        cwd=os.path.join(os.getcwd(), "python_servers"),
        env={**dict(os.environ), "MCP_SERVER_PORT": "8001"},
        stdout=subprocess.PIPE, 
        stderr=subprocess.PIPE
        )
        
        time.sleep(3)
        
        # Test health endpoint
        response = requests.get("http://localhost:8001/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Salesforce MCP server responds to health check")
            
            # Test tools endpoint
            tools_response = requests.get("http://localhost:8001/tools", timeout=5)
            if tools_response.status_code == 200:
                tools_data = tools_response.json()
                print(f"‚úÖ Salesforce MCP server provides {len(tools_data.get('tools', []))} tools")
            else:
                print("‚ö†Ô∏è  Salesforce tools endpoint failed")
        else:
            print("‚ùå Salesforce MCP server health check failed")
            
        sf_process.terminate()
        sf_process.wait(timeout=5)
        
    except Exception as e:
        print(f"‚ùå Salesforce MCP server test failed: {e}")
        return False
    
    return True

def test_web_server():
    """Test that the web server can start with Strands integration"""
    print("\nüîç Testing MCP web server with Strands SDK...")
    
    try:
        import os
        # Import the web server class
        sys.path.append(os.path.join(os.getcwd(), "python_servers"))
        from mcp_web_server import MCPWebServer
        
        # Create an instance (this tests initialization)
        server = MCPWebServer()
        print("‚úÖ MCP web server with Strands SDK initializes successfully")
        
        # Test that the FastAPI app was created
        if hasattr(server, 'app') and server.app:
            print("‚úÖ FastAPI app created")
        else:
            print("‚ùå FastAPI app not created")
            return False
            
        # Test Strands integration
        if hasattr(server, 'strands_agent') and server.strands_agent:
            print("‚úÖ Strands agent initialized")
        else:
            print("‚ö†Ô∏è  Strands agent not initialized (may be expected)")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Web server test failed: {e}")
        return False

def main():
    """Run all tests"""
    print("üöÄ Testing MCP Integration with Python 3.12 and Strands SDK\n")
    
    import os
    # Change to project root (parent directory)
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    os.chdir(project_root)
    print(f"Running tests from: {project_root}")
    
    tests = [
        test_python_version,
        test_imports,
        test_mcp_servers,
        test_web_server
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå Test {test.__name__} crashed: {e}")
    
    print(f"\nüìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! MCP integration is working correctly.")
        print("\n‚úÖ Ready for Docker deployment!")
        print("‚úÖ Python 3.12 with proper MCP support")
        print("‚úÖ Strands SDK integration working")
        print("‚úÖ MCP servers can run in HTTP mode")
    else:
        print("‚ö†Ô∏è  Some tests failed. Please check the issues above.")
    
    return passed == total

if __name__ == "__main__":
    import os
    main()